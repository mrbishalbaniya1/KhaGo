rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ======== Helper Functions ========
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSuperAdmin() {
      // Check for a specific email and a custom claim if you set one
      return request.auth.token.email == 'apeuninepal.com@gmail.com';
    }

    // Check if the requesting user is a manager for a given managerId
    function isTheManager(managerId) {
        return request.auth.uid == managerId;
    }

    // Check if the requesting user is an employee of a given managerId
    function isEmployeeOf(managerId) {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId == managerId;
    }
    
    // Combined check for manager or their employee
    function isManagerOrEmployeeOf(managerId) {
        return isTheManager(managerId) || isEmployeeOf(managerId);
    }
    
    // Check if the user trying to be read/written has a specific manager
    function isUserManagedBy(userId, managerId) {
        return exists(/databases/$(database)/documents/users/$(userId)) &&
               get(/databases/$(database)/documents/users/$(userId)).data.managerId == managerId;
    }

    // ======== Rules for Users Collection ========
    
    match /users/{userId} {
      // READ:
      // 1. SuperAdmins can read any user profile.
      // 2. Users can read their own profile.
      // 3. Managers can read the profiles of their own employees and customers.
      allow read: if isSignedIn() && (
        isSuperAdmin() ||
        request.auth.uid == userId ||
        isUserManagedBy(userId, request.auth.uid)
      );
        
      // CREATE:
      // 1. New users can create their own document during signup.
      // 2. SuperAdmins can create manager users.
      // 3. Managers can create employees/customers under them.
      allow create: if isSignedIn() && (
          (request.auth.uid == userId) ||
          isSuperAdmin() ||
          (request.resource.data.managerId == request.auth.uid)
      );

      // UPDATE:
      // 1. SuperAdmins can update any user.
      // 2. Users can update their own profile.
      // 3. Managers can update their own employees/customers.
      allow update: if isSignedIn() && (
        isSuperAdmin() ||
        request.auth.uid == userId ||
        isUserManagedBy(userId, request.auth.uid)
      );

      // DELETE:
      // 1. SuperAdmins can delete any user.
      // 2. Managers can delete their own employees/customers.
      allow delete: if isSignedIn() && (
        isSuperAdmin() ||
        isUserManagedBy(userId, request.auth.uid)
      );
    }
    
    // ======== Rules for Manager-Scoped Collections ========
    // This single rule applies to: orders, products, expenses, inventory
    
    match /{collection}/{docId} {
        // ALLOW LIST/READ/WRITE if:
        // 1. The user is a SuperAdmin.
        // 2. The user is the manager of the data or an employee of that manager.
        allow list, read, write: if isSignedIn() && (
            isSuperAdmin() ||
            (request.query.limit <= 100 && isManagerOrEmployeeOf(request.query.managerId)) || // For list queries
            isManagerOrEmployeeOf(resource.data.managerId) // For get/update/delete
        );
        
        // ALLOW CREATE if:
        // 1. The user is a SuperAdmin.
        // 2. The user is the manager or an employee, and the new document's managerId is correct.
        allow create: if isSignedIn() && (
            isSuperAdmin() ||
            isManagerOrEmployeeOf(request.resource.data.managerId)
        );
    }
  }
}