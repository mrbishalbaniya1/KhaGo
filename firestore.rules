
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth.token.email == 'apeuninepal.com@gmail.com';
    }

    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }


    function isEmployee(managerId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId == managerId;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }
    
    match /users_by_email/{email} {
        allow read, create: if true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can create a user document (for sign-up)
      allow create: if true;
      
      // Only the user themselves or a superadmin can read their own data.
      // Managers can read data of their own employees.
      allow read: if isOwner(userId) || isSuperAdmin() || isEmployee(get(/databases/$(database)/documents/users/$(userId)).data.managerId);
      
      // Users can update their own data.
      // Superadmins can update any user.
      // Managers can update their employees.
      allow update: if isOwner(userId) || isSuperAdmin() || isEmployee(get(/databases/$(database)/documents/users/$(userId)).data.managerId);

      // Superadmins can delete managers.
      // Managers can delete their own employees.
      allow delete: if isSuperAdmin() || isEmployee(get(/databases/$(database)/documents/users/$(userId)).data.managerId);
    }
    
    // For manager-specific data, assuming a structure where each manager's data is under a subcollection or has a managerId field.
    // The following rules apply to collections that should be accessible by managers and their staff.
    
    // Products are public to read for anyone
    match /products/{productId} {
      allow read: if true;
      allow write: if isManager() || isSuperAdmin();
    }
    
    // Orders, expenses, and inventory can be managed by the manager and their employees.
    match /orders/{orderId} {
        allow read, write: if isManager() || isSuperAdmin() || isEmployee(resource.data.managerId);
    }
    
     match /expenses/{expenseId} {
        allow read, write: if isManager() || isSuperAdmin() || isEmployee(resource.data.managerId);
    }

    match /inventory/{transactionId} {
       allow read, write: if isManager() || isSuperAdmin() || isEmployee(resource.data.managerId);
    }
  }
}
