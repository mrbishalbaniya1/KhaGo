rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }

    function isEmployee() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole != 'superadmin' && userRole != 'manager' && userRole != 'customer';
    }
    
    function getManagerId() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId;
    }

    // A user is creating their own user document during signup
    function isSigningUp() {
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // USERS
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                  || isSuperAdmin()
                  || (isManager() && resource.data.managerId == request.auth.uid)
                  || (isEmployee() && resource.data.managerId == getManagerId() && request.auth.uid == userId);
                  
      allow list: if isSuperAdmin()
                   || (isManager() && request.query.managerId == request.auth.uid);
                   
      allow create: if isSigningUp() || isSuperAdmin() || isManager();
      
      allow update: if request.auth.uid == userId || isSuperAdmin() || isManager();
      
      allow delete: if isSuperAdmin() || isManager();
    }
    
    // USERS_BY_EMAIL (for ensuring unique usernames)
    match /users_by_email/{email} {
      allow read, write: if request.auth != null; // Allow any authenticated user to check for uniqueness
    }

    // PRODUCTS
    match /products/{productId} {
      allow read: if isSuperAdmin()
                   || (isManager() && resource.data.managerId == request.auth.uid)
                   || (isEmployee() && resource.data.managerId == getManagerId());

      allow list: if isSuperAdmin()
                   || ((isManager() || isEmployee()) && request.query.managerId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId);
                   
      allow create, update, delete: if (isManager() && request.resource.data.managerId == request.auth.uid) || isSuperAdmin();
    }
    
    // ORDERS
    match /orders/{orderId} {
       allow read, list: if isSuperAdmin() 
                      || ((isManager() || isEmployee()) && request.query.managerId == getManagerId());
       
       allow create, update, delete: if isManager() || isEmployee() || isSuperAdmin();
    }

    // INVENTORY
    match /inventory/{transactionId} {
      allow read, list: if isSuperAdmin()
                     || ((isManager() || isEmployee()) && request.query.managerId == getManagerId());

      allow create: if isManager() || isEmployee() || isSuperAdmin();
    }

    // EXPENSES
    match /expenses/{expenseId} {
      allow read, list: if isSuperAdmin()
                     || ((isManager() || isEmployee()) && request.query.managerId == getManagerId());
      
      allow create, update, delete: if isManager() || isEmployee() || isSuperAdmin();
    }
  }
}
