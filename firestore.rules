rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =========== HELPER FUNCTIONS =========== //

    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return request.auth.token.email == 'apeuninepal.com@gmail.com';
    }

    function isRequestingOwnData(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isApproved(userId) {
      let userData = getUserData(userId);
      return userData.status == 'approved';
    }

    function isManager(userId) {
      return getUserData(userId).role == 'manager';
    }

    function isEmployee(userId) {
      let userData = getUserData(userId);
      return userData.role != 'manager' && userData.role != 'superadmin' && userData.role != 'customer';
    }

    function getManagerId(userId) {
      let userData = getUserData(userId);
      if (userData.role == 'manager') {
        return userId;
      }
      return userData.managerId;
    }

    // =========== COLLECTION RULES =========== //

    match /users/{userId} {
      allow create: if isSignedIn() && isRequestingOwnData(userId);
      
      allow read: if isSignedIn() && (
                    isSuperAdmin() || 
                    isRequestingOwnData(userId) ||
                    // Allow managers to read their own employees/customers
                    (isManager(request.auth.uid) && getUserData(userId).managerId == request.auth.uid)
                  );

      allow update: if isSignedIn() && (
                      isSuperAdmin() || 
                      isRequestingOwnData(userId) ||
                      // Allow managers to update their own employees/customers
                      (isManager(request.auth.uid) && getUserData(userId).managerId == request.auth.uid)
                    );
      
      allow delete: if isSignedIn() && (
                      isSuperAdmin() ||
                      // Allow managers to delete their own employees/customers
                      (isManager(request.auth.uid) && getUserData(userId).managerId == request.auth.uid)
                    );
    }
    
    // Allow superadmin to create users_by_email entries for username uniqueness
    match /users_by_email/{email} {
        allow read, write: if isSuperAdmin();
    }
    
    // Generic rule for collections scoped by managerId
    match /{collection}/{docId} 
      where collection in ['products', 'orders', 'expenses', 'inventory'] {
        // READ access for manager and their employees
        allow read: if isSignedIn() && isApproved(request.auth.uid) &&
                       resource.data.managerId == getManagerId(request.auth.uid);
                       
        // WRITE access (update, delete) for manager and their employees
        allow update, delete: if isSignedIn() && isApproved(request.auth.uid) &&
                                 resource.data.managerId == getManagerId(request.auth.uid);

        // CREATE access for manager and their employees
        allow create: if isSignedIn() && isApproved(request.auth.uid) &&
                         request.resource.data.managerId == getManagerId(request.auth.uid);
    }
  }
}
