
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth.token.email == 'apeuninepal.com@gmail.com';
    }

    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    
    function isEmployee(managerId) {
       let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
       return user.role != 'manager' && user.managerId == managerId;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isManagerOfResource(resource) {
      return resource.data.managerId == request.auth.uid;
    }
    
    function isEmployeeOfResource(resource) {
       let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
       return user.managerId == resource.data.managerId;
    }

    // USERS collection
    match /users/{userId} {
      // Allow read access for:
      // 1. The user themselves
      // 2. A superadmin
      // 3. A manager accessing their own employees or customers
      allow read: if isOwner(userId) || isSuperAdmin() || 
                  (isManager() && get(/databases/$(database)/documents/users/$(userId)).data.managerId == request.auth.uid);

      // Allow creating a user document if:
      // 1. The user is creating their own document (and it doesn't exist yet)
      // 2. A superadmin is creating a manager
      // 3. A manager is creating an employee or customer
      allow create: if (isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId))) ||
                     (isSuperAdmin() && request.resource.data.role == 'manager') ||
                     (isManager() && request.resource.data.managerId == request.auth.uid);

      // Allow updating a user document if:
      // 1. The user is updating their own profile
      // 2. A superadmin is updating a manager
      // 3. A manager is updating their own employee/customer
      allow update: if isOwner(userId) || isSuperAdmin() ||
                    (isManager() && get(/databases/$(database)/documents/users/$(userId)).data.managerId == request.auth.uid);

      // Allow deleting a user document if:
      // 1. A superadmin is deleting a manager
      // 2. A manager is deleting their own employee/customer
      allow delete: if isSuperAdmin() ||
                     (isManager() && get(/databases/$(database)/documents/users/$(userId)).data.managerId == request.auth.uid);
    }
    
    // USERS_BY_EMAIL collection (used for username uniqueness check)
    match /users_by_email/{email} {
      // Only allow creation during signup. No reads/updates/deletes.
      allow read, update, delete: if false;
      allow create: if request.auth != null;
    }

    // PRODUCTS collection
    match /products/{productId} {
      allow read: if isSuperAdmin() || get(path).data.managerId == request.auth.uid || isEmployee(get(path).data.managerId);
      allow create: if isManager() && request.resource.data.managerId == request.auth.uid;
      allow update, delete: if isManagerOfResource(get(path));
    }
    
    // ORDERS collection
    match /orders/{orderId} {
      allow read: if isSuperAdmin() || get(path).data.managerId == request.auth.uid || isEmployee(get(path).data.managerId);
      allow create: if (isManager() && request.resource.data.managerId == request.auth.uid) ||
                      (isEmployee(request.resource.data.managerId));
      allow update, delete: if isManagerOfResource(get(path)) || isEmployeeOfResource(get(path));
    }
    
    // EXPENSES collection
    match /expenses/{expenseId} {
       allow read: if isSuperAdmin() || get(path).data.managerId == request.auth.uid || isEmployee(get(path).data.managerId);
       allow create: if (isManager() && request.resource.data.managerId == request.auth.uid) ||
                      (isEmployee(request.resource.data.managerId));
       allow update, delete: if isManagerOfResource(get(path)) || isEmployeeOfResource(get(path));
    }
    
    // INVENTORY collection
    match /inventory/{inventoryId} {
      allow read: if isSuperAdmin() || get(path).data.managerId == request.auth.uid || isEmployee(get(path).data.managerId);
       allow create: if (isManager() && request.resource.data.managerId == request.auth.uid) ||
                      (isEmployee(request.resource.data.managerId));
      allow update, delete: if isManagerOfResource(get(path)) || isEmployeeOfResource(get(path));
    }
  }
}
