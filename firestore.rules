
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check user roles
    function isSuperAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'superadmin';
    }
    
    function isManager(userId) {
       return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'manager';
    }
    
    function isEmployee(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role != 'customer' &&
             get(/databases/$(database)/documents/users/$(userId)).data.role != 'manager' &&
             get(/databases/$(database)/documents/users/$(userId)).data.role != 'superadmin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    // USERS
    match /users/{userId} {
      // Anyone can create their own user record (for signup)
      // Users can update their own data
      // Superadmin can view/update any user
      // Managers can view their own employees
      allow read: if isSignedIn() && (isOwner(userId) || isSuperAdmin(request.auth.uid) || 
                  (isManager(request.auth.uid) && resource.data.managerId == request.auth.uid));
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isSuperAdmin(request.auth.uid));
      allow delete: if isSuperAdmin(request.auth.uid);
    }
    
    match /users_by_email/{email} {
        allow create: if isSignedIn();
        allow read: if isSignedIn();
    }
    
    // PRODUCTS
    match /products/{productId} {
        // Publicly readable
        allow read: if true;
        // Only managers can create/update/delete
        allow write: if isSignedIn() && isManager(request.auth.uid);
    }
    
    // A single manager's data
    match /users/{managerId} {
    
        // ORDERS, EXPENSES, INVENTORY, CUSTOMERS
        match /{collection}/{docId} {
            // Manager and their employees can access these collections
            allow read, write: if isSignedIn() && (isOwner(managerId) || (isEmployee(request.auth.uid) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId == managerId));
        }
    }
    
     // Catch-all for other collections at the root (like orders, expenses for older structure)
     // This will be more restrictive
     match /{document=**} {
      allow read, write: if isSignedIn() && (isSuperAdmin(request.auth.uid) || isManager(request.auth.uid));
    }
  }
}
