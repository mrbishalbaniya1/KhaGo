
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.email == 'apeuninepal.com@gmail.com';
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isApproved() {
      return isSignedIn() && getUserData(request.auth.uid).status == 'approved';
    }

    // --- User Collection Rules ---

    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);

      allow read: if isSignedIn() && (
        isSuperAdmin() ||
        isOwner(userId) ||
        // Manager can read their own employees
        (getUserData(request.auth.uid).role == 'manager' && getUserData(userId).managerId == request.auth.uid) ||
        // Employee can read their own manager's profile
        (getUserData(request.auth.uid).managerId != null && userId == getUserData(request.auth.uid).managerId)
      );

      allow update: if isSignedIn() && (
        isSuperAdmin() ||
        isOwner(userId) ||
        // Manager can update their own employees
        (getUserData(request.auth.uid).role == 'manager' && getUserData(userId).managerId == request.auth.uid)
      );
      
      allow delete: if isSignedIn() && (
        isSuperAdmin() ||
        // Manager can delete their own employees
        (getUserData(request.auth.uid).role == 'manager' && getUserData(userId).managerId == request.auth.uid)
      );
    }
    
    match /users_by_email/{email} {
      allow read, write: if isSuperAdmin();
    }
    
    // --- Business Data Collections Rules ---
    
    function isManagerOfResource() {
      // For create operations, check incoming data
      let data = request.method == 'create' ? request.resource.data : resource.data;
      return getUserData(request.auth.uid).role == 'manager' && request.auth.uid == data.managerId;
    }
    
    function isEmployeeOfResource() {
       // For create operations, check incoming data
      let data = request.method == 'create' ? request.resource.data : resource.data;
      return getUserData(request.auth.uid).managerId == data.managerId;
    }

    match /orders/{orderId} {
      allow read, write: if isApproved() && (isManagerOfResource() || isEmployeeOfResource());
    }
    
    match /products/{productId} {
      allow read, write: if isApproved() && (isManagerOfResource() || isEmployeeOfResource());
    }

    match /expenses/{expenseId} {
      allow read, write: if isApproved() && (isManagerOfResource() || isEmployeeOfResource());
    }
    
    match /inventory/{inventoryId} {
      allow read, write: if isApproved() && (isManagerOfResource() || isEmployeeOfResource());
    }
  }
}
