
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get the user's role and data
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if the user is a superadmin
    function isSuperAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'superadmin';
    }

    // Helper function to check if the user is a manager
    function isManager() {
      return isSignedIn() && getRole(request.auth.uid) == 'manager';
    }
    
    // Helper function to check if a user is an employee of the requesting manager
    function isMyEmployee(userId) {
        return isManager() && getUserData(userId).managerId == request.auth.uid;
    }

    // Users Collection
    match /users/{userId} {
      // Allow user to create their own document during signup
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Allow user to read their own data
      // Allow superadmin to read any user data
      // Allow manager to read their own employees' data
      allow read: if (isSignedIn() && request.auth.uid == userId) || isSuperAdmin() || isMyEmployee(userId);
      
      // Allow user to update their own data
      // Allow superadmin to update any user
      // Allow manager to update their own employees
      allow update: if (isSignedIn() && request.auth.uid == userId) || isSuperAdmin() || isMyEmployee(userId);
      
      // Allow superadmin or manager to delete their employees
      allow delete: if isSuperAdmin() || isMyEmployee(userId);
    }
    
    // users_by_email Collection (used for ensuring unique emails)
    match /users_by_email/{email} {
      allow create: if isSignedIn();
      allow read, write: if isSuperAdmin();
    }
    
    // Products, Orders, Expenses, Inventory, Customers
    // For these collections, we'll implement a rule based on managerId
    // Since these collections don't have a managerId field directly,
    // we'll assume for now that only managers can access them.
    // A better implementation would be to add managerId to each document.
    
    match /products/{productId} {
      allow read: if isSignedIn(); // All signed-in users can read products
      allow write: if isManager() || isSuperAdmin();
    }
    
    match /orders/{orderId} {
       allow read, write: if isManager() || isSuperAdmin();
    }
    
    match /expenses/{expenseId} {
       allow read, write: if isManager() || isSuperAdmin();
    }
    
    match /inventory/{transactionId} {
       allow read, write: if isManager() || isSuperAdmin();
    }
  }
}
